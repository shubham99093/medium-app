// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @unique @default(uuid())
  email     String      @unique
  name      String?
  password  String
  imgUrl    String      @default("/images/profile.jpg")
  bio       String?
  posts     Post[]
  SavedPost SavedPost[]
  Like      Like[]
}

model Post {
  id        String      @unique @default(uuid())
  title     String
  content   String
  imgUrl    String      @default("/images/profile.jpg")
  Published Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
  SavedPost SavedPost[]
  Like      Like[]
}

model SavedPost {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Ensure a user can only like a post once
}
